// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFlowRate = `-- name: CreateFlowRate :one
INSERT INTO flow_rates (
  value, created_at
) VALUES (
  $1, $2
)
RETURNING id, value, created_at
`

type CreateFlowRateParams struct {
	Value     float64          `json:"value"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateFlowRate(ctx context.Context, arg CreateFlowRateParams) (FlowRate, error) {
	row := q.db.QueryRow(ctx, createFlowRate, arg.Value, arg.CreatedAt)
	var i FlowRate
	err := row.Scan(&i.ID, &i.Value, &i.CreatedAt)
	return i, err
}

const createVolume = `-- name: CreateVolume :one
INSERT INTO volumes (
  value, created_at
) VALUES (
  $1, $2
)
RETURNING id, value, created_at
`

type CreateVolumeParams struct {
	Value     float64          `json:"value"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateVolume(ctx context.Context, arg CreateVolumeParams) (Volume, error) {
	row := q.db.QueryRow(ctx, createVolume, arg.Value, arg.CreatedAt)
	var i Volume
	err := row.Scan(&i.ID, &i.Value, &i.CreatedAt)
	return i, err
}

const getTotalVolumeByPeriod = `-- name: GetTotalVolumeByPeriod :one
SELECT
  SUM(value)::float AS total_value
FROM volumes
WHERE created_at >= date_trunc($1, NOW() AT TIME ZONE 'America/Recife')
`

func (q *Queries) GetTotalVolumeByPeriod(ctx context.Context, dateTrunc string) (float64, error) {
	row := q.db.QueryRow(ctx, getTotalVolumeByPeriod, dateTrunc)
	var total_value float64
	err := row.Scan(&total_value)
	return total_value, err
}

const getVolumes = `-- name: GetVolumes :many
SELECT id, value, created_at FROM volumes
ORDER BY created_at
LIMIT $1
`

func (q *Queries) GetVolumes(ctx context.Context, limit int32) ([]Volume, error) {
	rows, err := q.db.Query(ctx, getVolumes, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Volume
	for rows.Next() {
		var i Volume
		if err := rows.Scan(&i.ID, &i.Value, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVolumesByPeriod = `-- name: GetVolumesByPeriod :many
SELECT
  date_trunc($1, created_at)::TIMESTAMP AS period,
  SUM(value)::float AS total_value
FROM volumes
WHERE created_at <= NOW() AT TIME ZONE 'America/Recife'
GROUP BY period
ORDER BY period DESC
LIMIT $2
`

type GetVolumesByPeriodParams struct {
	DateTrunc string `json:"date_trunc"`
	Limit     int32  `json:"limit"`
}

type GetVolumesByPeriodRow struct {
	Period     pgtype.Timestamp `json:"period"`
	TotalValue float64          `json:"total_value"`
}

func (q *Queries) GetVolumesByPeriod(ctx context.Context, arg GetVolumesByPeriodParams) ([]GetVolumesByPeriodRow, error) {
	rows, err := q.db.Query(ctx, getVolumesByPeriod, arg.DateTrunc, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVolumesByPeriodRow
	for rows.Next() {
		var i GetVolumesByPeriodRow
		if err := rows.Scan(&i.Period, &i.TotalValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
